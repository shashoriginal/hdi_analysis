# Load datasets
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv")
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv")
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx")
# Inspect the first few rows of the datasets
head(gender_inequality)
head(hdi_data)
head(employment_data)
# Load libraries
library(readr)
library(readxl)
library(dplyr)
# Load datasets without showing column types
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv", show_col_types = FALSE)
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv", show_col_types = FALSE)
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx") # read_excel does not show column types by default
# Inspect the first few rows of the datasets
head(gender_inequality)
head(hdi_data)
head(employment_data)
# Suppress package startup messages
suppressPackageStartupMessages({
library(readr)
library(readxl)
library(dplyr)
library(DT) # for interactive tables
})
library(dtplyr)
install.packages("DT")
# Suppress package startup messages
suppressPackageStartupMessages({
library(readr)
library(readxl)
library(dplyr)
library(DT) # for interactive tables
})
# Load datasets without showing column types
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv", show_col_types = FALSE)
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv", show_col_types = FALSE)
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx")
# Inspect the first few rows of the datasets using DT for an interactive table
datatable(gender_inequality, options = list(pageLength = 5))
datatable(hdi_data, options = list(pageLength = 5))
datatable(employment_data, options = list(pageLength = 5))
# Suppress package startup messages
suppressPackageStartupMessages({
library(readr)
library(readxl)
library(dplyr)
library(DT) # for interactive tables
})
# Load datasets without showing column types
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv", show_col_types = FALSE)
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv", show_col_types = FALSE)
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx")
# Inspect the first few rows of the datasets using DT for an interactive table
datatable(gender_inequality, options = list(pageLength = 5))
datatable(hdi_data, options = list(pageLength = 5))
datatable(employment_data, options = list(pageLength = 5))
knitr::opts_chunk$set(echo = TRUE)
options(warn = -1)
# Suppress package startup messages
suppressPackageStartupMessages({
library(readr)
library(readxl)
library(dplyr)
library(DT) # for interactive tables
})
# Load datasets without showing column types
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv", show_col_types = FALSE)
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv", show_col_types = FALSE)
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx")
# Inspect the first few rows of the datasets using DT for an interactive table
datatable(gender_inequality, options = list(pageLength = 5))
datatable(hdi_data, options = list(pageLength = 5))
datatable(employment_data, options = list(pageLength = 5))
# Inspect the datasets
head(gender_inequality)
summary(hdi_data)
str(employment_data)
# Check for missing values
sum(is.na(gender_inequality))
sum(is.na(hdi_data))
sum(is.na(employment_data))
# Clean and preprocess (hypothetical code, dependent on the actual data inspection)
gender_inequality <- gender_inequality %>% mutate(Country = as.factor(Country))
hdi_data <- hdi_data %>% drop_na()
employment_data <- employment_data %>% rename(Country = `Country Name`)
colnames(employment_data)
colnames(employment_data)
employment_data <- employment_data %>% rename(Country = Country and areas)
colnames(employment_data)
employment_data <- employment_data %>% rename(Country = Country and areas)
colnames(employment_data)
# Renaming 'Country and areas' to 'Country'
employment_data <- employment_data %>% rename(Country = `Country and areas`)
colnames(employment_data)
# Renaming 'Country and areas' to 'Country'
employment_data <- employment_data %>% rename(Country = `Country and areas`)
colnames(employment_data)
# Renaming 'Country and areas' to 'Country'
employment_data <- employment_data %>% rename(Country = `Country and areas`)
colnames(employment_data)
# Check for missing values
sum(is.na(gender_inequality))
sum(is.na(hdi_data))
sum(is.na(employment_data))
# Clean and preprocess (hypothetical code, dependent on the actual data inspection)
gender_inequality <- gender_inequality %>% mutate(Country = as.factor(Country))
hdi_data <- hdi_data %>% drop_na()
employment_data <- employment_data %>% rename(Country = `Country Name`)
colnames(employment_data)
# Check for missing values
sum(is.na(gender_inequality))
sum(is.na(hdi_data))
sum(is.na(employment_data))
# Clean and preprocess (hypothetical code, dependent on the actual data inspection)
gender_inequality <- gender_inequality %>% mutate(Country = as.factor(Country))
hdi_data <- hdi_data %>% drop_na()
# Merge datasets by country
final_dataset <- hdi_data %>%
left_join(gender_inequality, by = "Country") %>%
left_join(employment_data, by = "Country")
library(ggplot2)
ggplot(final_dataset, aes(x = HDI_Score, y = Gender_Inequality_Index)) + geom_point()
library(ggplot2)
# Assuming 'final_dataset' is the name of your merged dataset and you have a column named 'Gender_Inequality_Index'
ggplot(final_dataset, aes(x = `HDI Value`, y = Gender_Inequality_Index)) + geom_point()
library(ggplot2)
ggplot(final_dataset, aes(x = `HDI Value`, y = `GII Value`)) + geom_point()
colnames(employment_data)
# Check for missing values
sum(is.na(gender_inequality))
sum(is.na(hdi_data))
sum(is.na(employment_data))
# Clean and preprocess (hypothetical code, dependent on the actual data inspection)
gender_inequality <- gender_inequality %>% mutate(Country = as.factor(Country))
hdi_data <- hdi_data %>% drop_na()
library(ggplot2)
ggplot(final_dataset, aes(x = `HDI Value`, y = `GII Value`)) + geom_point()
# Suppress package startup messages
suppressPackageStartupMessages({
library(readr)
library(tidyr)
library(readxl)
library(dplyr)
library(DT) # for interactive tables
})
# Load datasets without showing column types
gender_inequality <- read_csv("cleaned_Gender_Inequality_Index.csv", show_col_types = FALSE)
hdi_data <- read_csv("cleaned_HDI_data_final (1).csv", show_col_types = FALSE)
employment_data <- read_excel("Cleaned_JME_Country_Estimates_May_2023.xlsx")
# Inspect the first few rows of the datasets using DT for an interactive table
datatable(gender_inequality, options = list(pageLength = 5))
datatable(hdi_data, options = list(pageLength = 5))
datatable(employment_data, options = list(pageLength = 5))
# Inspect the datasets
head(gender_inequality)
summary(hdi_data)
str(employment_data)
colnames(employment_data)
# Check for missing values
sum(is.na(gender_inequality))
sum(is.na(hdi_data))
sum(is.na(employment_data))
# Clean and preprocess (hypothetical code, dependent on the actual data inspection)
gender_inequality <- gender_inequality %>% mutate(Country = as.factor(Country))
hdi_data <- hdi_data %>% drop_na()
# Merge datasets by country
final_dataset <- hdi_data %>%
left_join(gender_inequality, by = "Country") %>%
left_join(employment_data, by = "Country")
# Check column names for both datasets
colnames(hdi_data)
colnames(employment_data)
# Check column names for both datasets
colnames(employment_data)
employment_data <- rename(employment_data, Country = 'Country and areas')
employment_data <- rename(employment_data, Country = 'Country and areas')
# Merge datasets by country
final_dataset <- hdi_data %>%
left_join(gender_inequality, by = "Country") %>%
left_join(employment_data, by = "Country")
library(ggplot2)
ggplot(final_dataset, aes(x = `HDI Value`, y = `GII Value`)) + geom_point()
library(stringr)
# Standardize the country names by removing leading/trailing whitespaces and converting to a consistent case
gender_inequality <- gender_inequality %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
hdi_data <- hdi_data %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
employment_data <- employment_data %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
# Summary statistics for HDI data
hdi_summary <- hdi_data %>%
summarise(
Average_HDI = mean(HDI Value, na.rm = TRUE),
gender_inequality_summary <- gender_inequality %>%
summarise(
Average_GII = mean(`GII Value`, na.rm = TRUE),
Median_Maternal_Mortality = median(`Maternal Mortality Ratio`, na.rm = TRUE),
Average_Female_Labor_Force_Participation = mean(`Labour Force Participation Rate (Female %)`, na.rm = TRUE)
)
# Visualization of GII values
ggplot(gender_inequality, aes(x = `GII Value`)) +
geom_histogram(binwidth = 0.01, fill = 'blue', color = 'black') +
theme_minimal() +
labs(title = "Distribution of GII Values", x = "GII Value", y = "Count")
library(stringr)
# Standardize the country names by removing leading/trailing whitespaces and converting to a consistent case
gender_inequality <- gender_inequality %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
hdi_data <- hdi_data %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
employment_data <- employment_data %>%
mutate(Country = str_trim(Country, side = "both") %>% str_to_title())
# Summary statistics
gender_inequality_summary <- gender_inequality %>%
summarise(
Average_GII = mean(`GII Value`, na.rm = TRUE),
Median_Maternal_Mortality = median(`Maternal Mortality Ratio`, na.rm = TRUE),
Average_Female_Labor_Force_Participation = mean(`Labour Force Participation Rate (Female %)`, na.rm = TRUE)
)
# Visualization of GII values
ggplot(gender_inequality, aes(x = `GII Value`)) +
geom_histogram(binwidth = 0.01, fill = 'blue', color = 'black') +
theme_minimal() +
labs(title = "Distribution of GII Values", x = "GII Value", y = "Count")
# Load necessary libraries
library(tidyverse)
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
# View the first few rows of the dataframe
head(hdi_data)
# Get a summary of the dataframe
summary(hdi_data)
# Load necessary libraries
library(tidyverse)
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
library(DT)
datatable(hdi_data)
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
library(DT)
datatable(hdi_data)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = FALSE)
options(warn = -1)
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
library(DT)
datatable(hdi_data)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE, results = FALSE)
options(warn = -1)
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
library(DT)
datatable(hdi_data)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
options(warn = -1)
# Load necessary libraries
suppressPackageStartupMessages(library(tidyverse))
# Set the path to the CSV file
file_path <- "Human Development Index - Full.csv"
# Read the CSV file into a dataframe
hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
# Examine the structure of the dataframe
str(hdi_data)
#Creating Interactive Table
library(DT)
datatable(hdi_data)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
library(naniar)
# Get an overview of missing values
vis_miss(hdi_data)
#Remove columns with more than a certain percentage of missing values
threshold <- 0.5 # 50% threshold
mostly_complete <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Check the structure after handling missing values
str(mostly_complete)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
library(naniar)
# Get an overview of missing values
vis_miss(hdi_data)
#Remove columns with more than a certain percentage of missing values
threshold <- 0.5 # 50% threshold
mostly_complete <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
library(naniar)
# Get an overview of missing values
vis_miss(hdi_data)
#Remove columns with more than a certain percentage of missing values
threshold <- 0.5 # 50% threshold
mostly_complete <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Check the structure after handling missing values
str(mostly_complete)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
library(naniar)
#Remove columns with more than a certain percentage of missing values
threshold <- 0.5 # 50% threshold
mostly_complete <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Check the structure after handling missing values
str(mostly_complete)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
library(naniar)
#Remove columns with more than a certain percentage of missing values
threshold <- 0.5 # 50% threshold
mostly_complete <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Check the structure after handling missing values
str(mostly_complete)
# Install and load necessary package
if (!requireNamespace("naniar", quietly = TRUE)) {
install.packages("naniar")
}
# Define a threshold for maximum allowable percentage of missing data per column
threshold <- 0.5 # 50% threshold
# Remove columns with missing data above the threshold
hdi_data <- hdi_data %>%
select_if(~ mean(is.na(.)) < threshold)
# Function to calculate the mode for categorical data
getmode <- function(v) {
uniqv <- unique(na.omit(v))
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Impute missing values for numerical and categorical data
hdi_data <- hdi_data %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
mutate(across(where(is.character), ~ ifelse(is.na(.), getmode(.), .)))
# Check the structure after handling missing values
str(hdi_data)
# Ensure correct data types for each column
# For numerical columns - convert factors or characters to numeric if necessary
hdi_data <- hdi_data %>%
mutate(across(where(is.character), ~ as.numeric(as.character(.)), .names = "numeric_{.col}"))
# For categorical columns - convert characters to factors if necessary
hdi_data <- hdi_data %>%
mutate(across(where(is.character), as.factor, .names = "factor_{.col}"))
# For date columns - convert characters to Date objects if necessary
# hdi_data <- hdi_data %>%
#   mutate(Date_Column = as.Date(Date_Column, format="%Y-%m-%d"))
# Check the updated structure after conversions
str(hdi_data)
# Ensure correct data types for each column
# For numerical columns - convert factors or characters to numeric if necessary
hdi_data <- hdi_data %>%
mutate(across(where(is.character), ~ as.numeric(as.character(.)), .names = "numeric_{.col}"))
# For categorical columns - convert characters to factors if necessary
hdi_data <- hdi_data %>%
mutate(across(where(is.character), as.factor, .names = "factor_{.col}"))
# For date columns - convert characters to Date objects if necessary
# hdi_data <- hdi_data %>%
#   mutate(Date_Column = as.Date(Date_Column, format="%Y-%m-%d"))
# Check the updated structure after conversions
str(hdi_data)
# Load the necessary library for visualization
library(ggplot2)
# Summary statistics for numerical data
summary_statistics <- hdi_data %>%
summarise(across(where(is.numeric), list(mean = ~mean(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
IQR = ~IQR(., na.rm = TRUE))))
# Histogram for a numerical variable
ggplot(hdi_data, aes(x = Numerical_Variable)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
# Assuming 'hdi_data' is your dataset
# Clean variable names to remove spaces, special characters, and ensure all are lowercase
hdi_data <- hdi_data %>%
rename_with(~ gsub(" ", "_", .)) %>%              # Replace spaces with underscores
rename_with(~ gsub("[^[:alnum:]_]", "", .)) %>%   # Remove non-alphanumeric characters except underscores
rename_with(~ tolower(.))                         # Convert to lowercase
# Check the new variable names
names(hdi_data)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, echo = TRUE)
options(warn = -1)
# Load necessary libraries
library(tidyverse)
# Assuming 'hdi_data' is your dataset
# Clean variable names to remove spaces, special characters, and ensure all are lowercase
hdi_data <- hdi_data %>%
rename_with(~ gsub(" ", "_", .)) %>%              # Replace spaces with underscores
rename_with(~ gsub("[^[:alnum:]_]", "", .)) %>%   # Remove non-alphanumeric characters except underscores
rename_with(~ tolower(.))                         # Convert to lowercase
# Define the name for the new CSV file
new_file_name <- "cleaned_HDI_data.csv"
# Write the dataframe to a CSV file in the current working directory
write.csv(hdi_data, new_file_name, row.names = FALSE)
# Set the path to the CSV file
file_path <- "cleaned_HDI_data.csv"
# Read the CSV file into a dataframe
cleaned_hdi_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
install.packages("plotly")
library(ggplot2)
library(plotly)
# Assuming 'cleaned_hdi_data' is your dataframe
p <- ggplot(cleaned_hdi_data, aes(x = carbondioxideemissionspercapitaproductiontonnes2021,
y = materialfootprintpercapitatonnes2021)) +
geom_point(aes(text = paste("Country:", factor_country)), size = 2) +
theme_minimal() +
labs(title = "CO2 Emissions vs. Material Footprint (2021)",
x = "CO2 Emissions Per Capita (tonnes)",
y = "Material Footprint Per Capita (tonnes)")
# Convert to interactive plot
p_interactive <- ggplotly(p, tooltip = "text")
# Save the interactive plot as an HTML file
htmlwidgets::saveWidget(p_interactive, "CO2_vs_Material_Footprint_Interactive.html")
library(ggplot2)
library(plotly)
# Assuming 'cleaned_hdi_data' is your dataframe
p <- ggplot(cleaned_hdi_data, aes(x = carbondioxideemissionspercapitaproductiontonnes2021,
y = materialfootprintpercapitatonnes2021)) +
geom_point(aes(text = paste("Country:", factor_country)), size = 2) +
theme_minimal() +
labs(title = "CO2 Emissions vs. Material Footprint (2021)",
x = "CO2 Emissions Per Capita (tonnes)",
y = "Material Footprint Per Capita (tonnes)")
# Convert to interactive plot
p_interactive <- ggplotly(p, tooltip = "text")
p_interactive
# Let's say we want to visualize this for males in Afghanistan
# Replace 'AFG' with the actual ISO3 code for the country you're interested in
# Filter data for Afghanistan
ind_data <- cleaned_hdi_data %>% filter(factor_iso3 == "IND")
# Create the line plot
p <- ggplot(afg_data, aes(x = year, y = expectedyearsofschoolingmale2021)) +
geom_line() +
theme_minimal() +
labs(title = "Expected Years of Schooling Over Time (Males in Afghanistan)",
x = "Year",
y = "Expected Years of Schooling")
# Let's say we want to visualize this for males in Afghanistan
# Replace 'AFG' with the actual ISO3 code for the country you're interested in
# Filter data for Afghanistan
ind_data <- cleaned_hdi_data %>% filter(factor_iso3 == "IND")
# Create the line plot
p <- ggplot(ind_data, aes(x = year, y = expectedyearsofschoolingmale2021)) +
geom_line() +
theme_minimal() +
labs(title = "Expected Years of Schooling Over Time (Males in India)",
x = "Year",
y = "Expected Years of Schooling")
# Convert to interactive plot
p_interactive <- ggplotly(p)
# Let's say we want to visualize this for males in Afghanistan
# Replace 'AFG' with the actual ISO3 code for the country you're interested in
# Filter data for Afghanistan
afg_data <- cleaned_hdi_data %>% filter(factor_iso3 == "AFG")
# Create the line plot
p <- ggplot(afg_data, aes(x = year, y = expectedyearsofschoolingmale2021)) +
geom_line() +
theme_minimal() +
labs(title = "Expected Years of Schooling Over Time (Males in Afghanistan)",
x = "Year",
y = "Expected Years of Schooling")
# Convert to interactive plot
p_interactive <- ggplotly(p)
library(plotly)
# We'll use 2021 data as an example, replace '2021' with the correct year if different
p <- plot_ly(cleaned_hdi_data, x = ~lifeexpectancyatbirth2021, y = ~expectedyearsofschooling2021,
z = ~gnipercapita2021, type = 'scatter3d', mode = 'markers',
marker = list(size = 3),
text = ~factor_country)
p
